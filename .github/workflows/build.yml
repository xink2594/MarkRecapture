# 工作流的名称，会显示在 GitHub Actions 页面
name: Build & Release Application

# 触发工作流的条件：当一个新的 Release 被创建时
on:
  release:
    types: [created]

# 工作流包含的任务 (Jobs)
jobs:
  # 定义一个名为 build-and-release 的任务
  build-and-release:
    # 使用“策略矩阵”(strategy matrix) 来为多个平台并行执行此任务
    strategy:
      matrix:
        # 定义一个名为 os 的变量，包含我们想要打包的所有操作系统
        os: [macos-latest, ubuntu-latest, windows-latest]

    # 根据矩阵中的变量，指定任务运行在哪个虚拟服务器上
    runs-on: ${{ matrix.os }}

    # 任务执行的具体步骤 (Steps)
    steps:
      # 第一步：检出（下载）你的仓库代码到虚拟服务器
      - name: Checkout code
        uses: actions/checkout@v4

      # 第二步：设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 指定 Node.js 版本
          cache: 'npm'       # 启用 npm 依赖缓存，加快后续构建速度

      # 第三步：安装项目依赖
      # 使用 npm ci 而不是 npm install，它更快且能确保使用 package-lock.json 中的精确版本
      - name: Install dependencies
        run: npm ci

      # 第四步：打包应用程序
      # GITHUB_TOKEN 是 GitHub Actions 自动提供的密钥，用于授权
      - name: Build and package application
        run: npm run dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 第五步：上传打包好的产物到 Release
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          # 这个 upload_url 来自触发工作流的 release 事件，告诉 action 上传到哪里
          upload_url: ${{ github.event.release.upload_url }}
          # GITHUB_TOKEN 用于授权上传
          asset_path: ./release/Mark Recapture Simulator Setup*.exe # Windows 产物路径
          asset_name: Mark-Recapture-Simulator-Windows.exe         # 在 Release 中显示的文件名
          asset_content_type: application/octet-stream
        # 仅当任务运行在 Windows 服务器上时，才执行此步骤
        if: matrix.os == 'windows-latest'

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/Mark Recapture Simulator*.dmg # macOS 产物路径
          asset_name: Mark-Recapture-Simulator-macOS.dmg
          asset_content_type: application/octet-stream
        # 仅当任务运行在 macOS 服务器上时，才执行此步骤
        if: matrix.os == 'macos-latest'
      
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/Mark Recapture Simulator*.AppImage # Linux 产物路径
          asset_name: Mark-Recapture-Simulator-Linux.AppImage
          asset_content_type: application/octet-stream
        # 仅当任务运行在 Ubuntu (Linux) 服务器上时，才执行此步骤
        if: matrix.os == 'ubuntu-latest'